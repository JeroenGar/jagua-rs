searchState.loadedDescShard("geo_types", 0, "The <code>geo-types</code> library defines geometric types for the …\nFor algorithms which can only use floating point <code>Point</code>s/…\nFor algorithms which can use both integer <strong>and</strong> floating …\nA <code>Point</code> iterator returned by the <code>points</code> method\nCreates a <code>Coord</code> from the given scalars.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a <code>LineString</code> containing the given coordinates.\nCreates a <code>Point</code> from the given coordinates.\nCreates a <code>Polygon</code> containing the given coordinates.\nCreates a <code>crate::geometry</code> from a WKT literal.\nA lightweight struct used to store coordinates on the …\nAn enum representing any possible geometry type.\nA collection of <code>Geometry</code> types.\nA line segment made up of exactly two <code>Coord</code>s.\nAn ordered collection of <code>Coord</code>s, representing a path …\nA collection of <code>LineString</code>s. Can be created from a <code>Vec</code> of …\nA collection of <code>Point</code>s. Can be created from a <code>Vec</code> of <code>Point</code>…\nA collection of <code>Polygon</code>s. Can be created from a <code>Vec</code> of …\nA single point in 2D space.\nA bounded two-dimensional area.\nAn <em>axis-aligned</em> bounded 2D rectangle whose area is defined …\nA bounded 2D area whose three vertices are defined by <code>Coord</code>…\nEquality assertion with an absolute limit.\nEquality assertion with an absolute limit.\nEquality assertion with an absolute limit.\nEquality assertion with an absolute limit.\nEquality assertion with an absolute limit.\nEquality assertion with an absolute limit.\nEquality assertion with an absolute limit.\nEquality assertion with an absolute limit.\nEquality assertion with an absolute limit.\nEquality assertion with an absolute limit.\nEquality assertion with an absolute limit.\nAdd a point to the given point.\nAdd a point to the given point and assign it to the …\nReturns the center <code>Coord</code> of the <code>Rect</code>.\nClose the <code>LineString</code>. Specifically, if the <code>LineString</code> has …\nReturn an iterator yielding the members of a <code>LineString</code> as …\nReturn an iterator yielding the coordinates of a <code>LineString</code>…\nReturns the cross product of 3 points. A positive value …\nCalculate the difference in coordinates (Δx, Δy).\nCalculate the determinant of the line.\nScaler division of a point\nScaler division of a point in place\nReturns the dot product of the two points: …\nCalculate the difference in ‘x’ components (Δx).\nCalculate the difference in ‘y’ components (Δy).\nReturns an empty GeometryCollection\nReturns an empty LineString\nReturns an empty MultiLineString\nReturns an empty MultiPoint\nReturns an empty MultiPolygon\nReturns an empty Polygon.\nReturn a reference to the exterior <code>LineString</code> ring.\nExecute the provided closure <code>f</code>, which is provided with a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a single <code>Point</code> (or something which can be …\nConvert a <code>Vec</code> of <code>Points</code> (or <code>Vec</code> of things which can be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCollect the results of a <code>Point</code> iterator into a <code>MultiPoint</code>\nReturns the height of the <code>Rect</code>.\nReturn a slice of the interior <code>LineString</code> rings.\nExecute the provided closure <code>f</code>, which is provided with a …\nAdd an interior ring to the <code>Polygon</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the coordinates of a <code>LineString</code> as a <code>Vec</code> of <code>Coord</code>s\nConsume the <code>Polygon</code>, returning the exterior <code>LineString</code> …\nIf this Geometry is a Line, then return that Line, else …\nIf this Geometry is a LineString, then return that …\nIf this Geometry is a MultiLineString, then return that, …\nIf this Geometry is a MultiPoint, then return that, else …\nIf this Geometry is a MultiPolygon, then return that, else …\nIf this Geometry is a Point, then return that, else None.\nReturn the coordinates of a <code>LineString</code> as a <code>Vec</code> of <code>Point</code>s\nIf this Geometry is a Polygon, then return that, else None.\nChecks if the linestring is closed; i.e. it is either …\nTrue if the MultiLineString is empty or if all of its …\nDetermine whether a Polygon is convex\nIs this GeometryCollection empty\nReturns the latitude/vertical component of the point.\nNumber of geometries in this GeometryCollection\nReturn an iterator yielding one <code>Line</code> for each line segment …\nReturns the longitude/horizontal component of the point.\nReturns the maximum <code>Coord</code> of the <code>Rect</code>.\nReturns the minimum <code>Coord</code> of the <code>Rect</code>.\nScaler multiplication of a point\nScaler multiplication of a point in place\nReturns a point with the x and y components negated.\nReturn an empty GeometryCollection\nCreates a new line segment.\nReturns a LineString with the given coordinates\nReturns a MultiLineString with the given LineStrings as …\nReturns a MultiPoint with the given Points as elements\nReturns a MultiPolygon with the given Polygons as elements\nCreates a new point.\nCreate a new <code>Polygon</code> with the provided exterior <code>LineString</code> …\nCreates a new rectangle from two corner coordinates.\nInstantiate Self from the raw content value\nDO NOT USE! This fn will be renamed to <code>new</code> in the upcoming …\nReturn the number of coordinates in the <code>LineString</code>.\nCount the number of interior rings in the polygon\nCount the total number of rings (interior and exterior) in …\nReturn an iterator yielding the coordinates of a <code>LineString</code>…\nReturn an iterator yielding the coordinates of a <code>LineString</code>…\nEquality assertion within a relative limit.\nEquality assertion within a relative limit.\nEquality assertion within a relative limit.\nEquality assertion within a relative limit.\nEquality assertion within a relative limit.\nEquality assertion within a relative limit.\nEquality assertion within a relative limit.\nEquality assertion within a relative limit.\nEquality assertion within a relative limit.\nEquality assertion within a relative limit.\nEquality assertion within a relative limit.\nReturn an iterator yielding one <code>Line</code> for each line segment …\nSets the latitude/vertical component of the point.\nSets the longitude/horizontal component of the point.\nSet the <code>Rect</code>’s maximum coordinate.\nSet the <code>Rect</code>’s minimum coordinate.\nSets the x/horizontal component of the point.\nSets the y/vertical component of the point.\nCalculate the slope (Δy/Δx).\nSplit a rectangle into two rectangles along the X-axis …\nSplit a rectangle into two rectangles along the Y-axis …\nSubtract a point from the given point.\nSubtract a point from the given point and assign it to the …\nConverts the (x,y) components of Point to degrees\nCreate a <code>Polygon</code> from the <code>Rect</code>.\nCreate a <code>Polygon</code> from the <code>Triangle</code>.\nConverts the (x,y) components of Point to radians\nAn iterator which yields the coordinates of a <code>LineString</code> …\nFallible alternative to <code>exterior_mut</code>.\nFallible alternative to <code>interiors_mut</code>.\nApproximate equality assertion for floating point …\nReturns the width of the <code>Rect</code>.\nReturns the x/horizontal component of the point.\nTypically, <code>x</code> is the horizontal position, or longitude for …\nTypically, <code>x</code> is the horizontal position, or longitude for …\nReturns a mutable reference to the x/horizontal component …\nReturns a tuple that contains the x/horizontal &amp; …\nReturns a tuple that contains the x/horizontal &amp; …\nReturns the y/vertical component of the point.\nTypically, <code>y</code> is the vertical position, or latitude for …\nTypically, <code>y</code> is the vertical position, or latitude for …\nReturns a mutable reference to the x/horizontal component …")