searchState.loadedDescShard("rand_distr", 0, "Generating random samples from probability distributions.\n<code>|beta| &gt;= alpha</code> or <code>nan</code>.\n<code>alpha</code> is infinite.\n<code>alpha &lt;= 0</code> or <code>nan</code>.\n<code>alpha</code> is subnormal. Variate generation methods are not …\n<code>alpha.len() &lt; 2</code>.\n<code>alpha &lt;= 0</code> or <code>nan</code>.\n<code>alpha &lt;= 0.0</code> or <code>nan</code>.\nSample a <code>u8</code>, uniformly distributed over ASCII letters and …\nThe shape parameter is not finite.\nThe standard deviation or other dispersion parameter is …\nThe Bernoulli distribution <code>Bernoulli(p)</code>.\nError type returned from <code>Bernoulli::new</code>.\nThe Beta distribution <code>Beta(α, β)</code>.\nError type returned from <code>Beta::new</code>.\n<code>beta &lt;= 0</code> or <code>nan</code>.\nThe binomial distribution <code>Binomial(n, p)</code>.\nError type returned from <code>Binomial::new</code>.\nThe Cauchy distribution <code>Cauchy(x₀, γ)</code>.\nError type returned from <code>Cauchy::new</code>.\nThe chi-squared distribution <code>χ²(k)</code>.\nError type returned from <code>ChiSquared::new</code> and <code>StudentT::new</code>.\nThe Dirichlet distribution …\nError type returned from <code>Dirichlet::new</code>.\nTypes (distributions) that can be used to create a random …\n<code>0.5 * k &lt;= 0</code> or <code>nan</code>.\nThe exponential distribution <code>Exp(λ)</code>.\nThe standard exponential distribution <code>Exp(1)</code>.\nError type returned from <code>Exp::new</code>.\nFailed to create required Beta distribition(s).\nFailed to create required Gamma distribution(s).\nThe Fisher F-distribution <code>F(m, n)</code>.\nError type returned from <code>FisherF::new</code>.\nThe Fréchet distribution <code>Fréchet(α, μ, σ)</code>.\nError type returned from <code>Frechet::new</code>.\nThe Gamma distribution <code>Gamma(k, θ)</code>.\nError type returned from <code>Gamma::new</code>.\nError type returned from <code>Geometric::new</code>.\nThe geometric distribution <code>Geometric(p)</code>.\nThe Gumbel distribution <code>Gumbel(μ, β)</code>.\nError type returned from <code>Gumbel::new</code>.\nError type returned from <code>Hypergeometric::new</code>.\nThe hypergeometric distribution <code>Hypergeometric(N, K, n)</code>.\n<code>p &lt; 0</code> or <code>p &gt; 1</code>.\n<code>p &lt; 0 || p &gt; 1</code> or <code>nan</code>\nThe inverse Gaussian distribution <code>IG(μ, λ)</code>.\nError type returned from <code>InverseGaussian::new</code>\nAn iterator over a <code>Distribution</code>\n<code>lambda &lt; 0</code> or <code>nan</code>.\nlocation is infinite or NaN\nlocation is infinite or NaN\nThe log-normal distribution <code>ln N(μ, σ²)</code>.\nThe maximum supported value of <code>lambda</code>\n<code>m &lt;= 0</code> or <code>nan</code>.\n<code>mean &lt;= 0</code> or <code>nan</code>.\nThe mean value is too small (log-normal samples must be …\n<code>mode &lt; min</code> or <code>mode &gt; max</code> or <code>mode</code> is NaN.\n<code>mode &lt; min</code> or <code>mode &gt; max</code> or <code>mode</code> is NaN.\n<code>n &lt;= 0</code> or <code>nan</code>.\n<code>n &lt; 1</code>.\n<code>lambda = ∞</code> or <code>lambda = nan</code>\nThe Normal distribution <code>N(μ, σ²)</code>.\nError type returned from <code>Normal::new</code> and <code>LogNormal::new</code>.\nThe normal-inverse Gaussian distribution <code>NIG(α, β)</code>.\nError type returned from <code>NormalInverseGaussian::new</code>\nA distribution to sample floating point numbers uniformly …\nA distribution to sample floating point numbers uniformly …\nThe Pareto distribution <code>Pareto(xₘ, α)</code>.\nError type returned from <code>Pareto::new</code>.\nThe PERT distribution <code>PERT(min, max, mode, shape)</code>.\nStruct used to build a <code>Pert</code>\nError type returned from <code>Pert</code> constructors.\nThe Poisson distribution <code>Poisson(λ)</code>.\nError type returned from <code>Poisson::new</code>.\n<code>total_population_size</code> is too large, causing floating point …\n<code>p &gt; 1</code>.\n<code>population_with_feature &gt; total_population_size</code>.\n<code>p &lt; 0</code> or <code>nan</code>.\n<code>max &lt; min</code> or <code>min</code> or <code>max</code> is NaN.\n<code>max &lt; min</code> or <code>min</code> or <code>max</code> is NaN.\n<code>s &lt;= 1</code> or <code>nan</code>.\n<code>s &lt; 0</code> or <code>nan</code>.\n<code>sample_size &gt; total_population_size</code>.\nscale is not finite positive number\nscale is not finite positive number\n<code>1 / scale == 0</code>.\n<code>scale &lt;= 0</code> or <code>nan</code>.\n<code>scale &lt;= 0</code> or <code>nan</code>.\n<code>scale &lt;= 0</code> or <code>nan</code>.\nThe scale parameter is not finite or it is less or equal …\n<code>scale &lt;= 0</code> or <code>nan</code>.\n<code>shape &lt;= 0</code> or <code>nan</code>.\nshape is not finite positive number\n<code>lambda</code> is too large, see Poisson::MAX_LAMBDA\n<code>shape &lt;= 0</code> or <code>nan</code>.\n<code>shape &lt;= 0</code> or <code>nan</code>.\n<code>shape &lt; 0</code> or <code>shape</code> is NaN\n<code>lambda &lt;= 0</code>\n<code>shape &lt;= 0</code> or <code>nan</code>.\n<code>size &lt; 2</code>.\nThe skew normal distribution <code>SN(ξ, ω, α)</code>.\nError type returned from <code>SkewNormal::new</code>.\nThe standard geometric distribution <code>Geometric(0.5)</code>.\nThe standard Normal distribution <code>N(0, 1)</code>.\nThe Standard Uniform distribution\nThe Student t-distribution <code>t(ν)</code>.\nThe triangular distribution <code>Triangular(min, max, mode)</code>.\nError type returned from <code>Triangular::new</code>.\nSample values uniformly between two bounds.\nSamples uniformly from the volume of the unit ball in …\nSamples uniformly from the circumference of the unit …\nSamples uniformly from the unit disc in two dimensions.\nSamples uniformly from the surface of the unit sphere in …\nThe Weibull distribution <code>Weibull(λ, k)</code>.\nError type returned from <code>Weibull::new</code>.\nThe Zeta distribution <code>Zeta(s)</code>.\nError type returned from <code>Zeta::new</code>.\nThe Zipf (Zipfian) distribution <code>Zipf(n, s)</code>.\nError type returned from <code>Zipf::new</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct, from mean and coefficient of variation\nConstruct, from (linear-space) mean and coefficient of …\nConstruct a new <code>Bernoulli</code> with the probability of success …\nSample from a z-score\nSample from a z-score\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the location of the distribution.\nMap sampled values to type <code>S</code>\nReturns the mean (<code>μ</code>) of the distribution.\nConstruct an object representing the <code>Beta(alpha, beta)</code> …\nConstruct a new <code>Bernoulli</code> with the given probability of …\nConstruct a new <code>Binomial</code> with the given shape parameters <code>n</code> …\nConstruct a new <code>Cauchy</code> with the given shape parameters …\nCreate a new chi-squared distribution with …\nConstruct a new <code>Dirichlet</code> with the given alpha parameter …\nConstruct a new <code>Exp</code> with the given shape parameter <code>lambda</code>.\nCreate a new <code>FisherF</code> distribution, with the given …\nConstruct a new <code>Frechet</code> distribution with given <code>location</code>, …\nConstruct an object representing the <code>Gamma(shape, scale)</code> …\nConstruct a new <code>Geometric</code> with the given shape parameter <code>p</code> …\nConstruct a new <code>Gumbel</code> distribution with given <code>location</code> …\nConstructs a new <code>Hypergeometric</code> with the shape parameters …\nConstruct a new <code>InverseGaussian</code> distribution with the …\nConstruct, from mean and standard deviation\nCreate a new <code>Uniform</code> instance, which samples uniformly …\nConstruct, from (log-space) mean and standard deviation\nConstruct a new <code>NormalInverseGaussian</code> distribution with …\nConstruct a new Pareto distribution with given <code>scale</code> and …\nConstruct a PERT distribution with defined <code>min</code>, <code>max</code>\nConstruct a new <code>Poisson</code> with the given shape parameter …\nConstruct, from location, scale and shape.\nCreate a new Student t-distribution with <code>ν</code> (nu) degrees …\nSet up the Triangular distribution with defined <code>min</code>, <code>max</code> …\nConstruct a new <code>Weibull</code> distribution with given <code>scale</code> and …\nConstruct a new <code>Zeta</code> distribution with given <code>s</code> parameter.\nConstruct a new <code>Zipf</code> distribution for a set with <code>n</code> …\nCreate a new <code>Uniform</code> instance, which samples uniformly …\nReturns the probability (<code>p</code>) of the distribution.\nGenerate a random value of <code>T</code>, using <code>rng</code> as the source of …\nCreate an iterator that generates random values of <code>T</code>, …\nReturns the scale of the distribution.\nReturns the shape of the distribution.\nReturns the standard deviation (<code>σ</code>) of the distribution.\nA distribution uniformly sampling numbers within a given …\nWeighted (index) sampling\nSpecify the mean\nSpecify the mode\nSet the shape parameter\n<code>low &gt; high</code>, or equal in case of exclusive range.\nError type returned from <code>Uniform::new</code> and <code>new_inclusive</code>.\nInput or range <code>high - low</code> is non-finite. Not relevant to …\nHelper trait similar to <code>Borrow</code> but implemented only for …\nRange that supports generating a single sample efficiently.\nHelper trait for creating objects using the correct …\nThe <code>UniformSampler</code> implementation supporting type <code>X</code>.\nSample values uniformly between two bounds.\nThe back-end implementing <code>UniformSampler</code> for <code>char</code>.\nThe back-end implementing <code>UniformSampler</code> for <code>Duration</code>.\nThe back-end implementing <code>UniformSampler</code> for …\nThe back-end implementing <code>UniformSampler</code> for integer types.\nHelper trait handling actual uniform sampling.\nThe back-end implementing <code>UniformSampler</code> for <code>usize</code>.\nThe type sampled by this implementation.\nImmutably borrows from an owned value. See <code>Borrow::borrow</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether the range is empty.\nConstruct self, with inclusive lower bound and exclusive …\nConstruct self, with inclusive bounds <code>[low, high]</code>.\nSample a value.\nSample from distribution, Lemire’s method, unbiased\nSample from distribution, Lemire’s method, unbiased\nSample from distribution, Lemire’s method, unbiased\nSample from distribution, Lemire’s method, unbiased\nSample from distribution, Lemire’s method, unbiased\nSample from distribution, Lemire’s method, unbiased\nSample from distribution, Lemire’s method, unbiased\nSample from distribution, Lemire’s method, unbiased\nSample from distribution, Lemire’s method, unbiased\nSample from distribution, Lemire’s method, unbiased\nGenerate a sample from the given range.\nSample a single value uniformly from a range with …\nSample a single value uniformly from a range with …\nSample single value, Canon’s method, biased\nSample single value, Canon’s method, biased\nSample single value, Canon’s method, biased\nSample single value, Canon’s method, biased\nSample single value, Canon’s method, biased\nSample single value, Canon’s method, biased\nSample single value, Canon’s method, biased\nSample single value, Canon’s method, biased\nSample single value, Canon’s method, biased\nSample single value, Canon’s method, biased\nWeight bound for <code>WeightedAliasIndex</code>\nInvalid weight errors\nNot enough non-zero weights are available to sample values\nThe input weight sequence is empty, too long, or wrongly …\nA weight is negative, too large for the distribution, or …\nMaximum number representable by <code>Self</code>.\nOverflow when calculating the sum of weights\nBounds on a weight\nA distribution using weighted sampling to pick a …\nA distribution using weighted sampling of discrete items.\nA distribution using weighted sampling to pick a …\nElement of <code>Self</code> equivalent to 0.\nRepresentation of 0\nChecked addition\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the weight at an index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the tree contains no weights.\nReturns <code>true</code> if we can sample.\nReturns the number of weights.\nCreates a new <code>WeightedAliasIndex</code>.\nCreates a new <code>WeightedTreeIndex</code> from a slice of weights.\nCreates a new a <code>WeightedIndex</code> <code>Distribution</code> using the values\nRemoves the last weight and returns it, or <code>None</code> if it is …\nAppends a new weight at the end.\nSums all values in slice <code>values</code>.\nSums all values in slice <code>values</code>.\nReturns the sum of all weights in this distribution.\nProduce an instance of <code>Self</code> from a <code>u32</code> value, or return …\nSamples a randomly selected index from the weighted …\nUpdates the weight at an index.\nUpdate a subset of weights, without changing the number of …\nReturns the weight at the given index, if it exists.\nReturns a lazy-loading iterator containing the current …")