searchState.loadedDescShard("lbf", 0, "Configuration for the LBF optimizer\nConfiguration of the Collision Detection Engine\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFraction of <code>n_samples_per_item</code> used for the local search …\nMinimum distance between items and other hazards. If …\nTotal budget of samples per item per layout\nMaximum distance between two vertices of a polygon to …\nMax deviation from the original polygon area as a …\nSeed for the PRNG. If undefined, the algorithm will run in …\nOptional SVG drawing options\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLeft-Bottom-Fill (LBF) optimizer for Bin Packing problems.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSmallRng is a fast, non-cryptographic PRNG …\nLeft-Bottom-Fill (LBF) optimizer for Strip Packing …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSmallRng is a fast, non-cryptographic PRNG …\nThe loss LBF assigned to a placing option. Weighted sum of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTightens a sampling <code>Rect</code> to eliminate regions which would …\nSearch the layout (i.e. CDE) for a valid placement of the …\nCreates <code>Transformation</code> samples for a given item. The …\nThe stddev of rotation starts at 2° and ends at 0.5°.\nThe stddev of translation starts at 1% and ends at 0.05% …\nAdjusts the standard deviation according to the fraction …\nReturns the argument unchanged.\nCreates a new sampler with default standard deviation …\nCalls <code>U::from(self)</code>.\nSamples a transformation from the distribution.\nSets the standard deviation of the normal distributions.\nShifts the mean of the normal distributions to the given …\nSamples a rotation from a normal distribution over a given …\nSamples a rotation (radians).\nSamples a rotation from a uniform distribution over a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSamples a <code>DTransformation</code> uniformly at random in a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")