searchState.loadedDescShard("jagua_rs", 0, "A fast and fearless Collision Detection Engine for 2D …\nExport the <code>web_time</code> crate’s <code>Instant</code> type for …\nEverything related to the Collision Detection Engine\nEntities to model 2D Irregular Cutting and Packing Problems\nGeometric primitives and base algorithms\nImporting problem instances into and exporting solutions …\nEnabled variants of the 2D irregular Cutting and Packing …\nHelper functions which do not belong to any specific module\nConfiguration of the <code>CDEngine</code>\nSnapshot of the state of <code>CDEngine</code>. Can be used to restore …\nThe Collision Detection Engine (CDE). <code>Hazard</code>s can be …\nStop traversing the quadtree and perform collision …\nCollects all hazards with which the polygon collides and …\nCollects all hazards with which the surrogate collides and …\nConfiguration of the CDE\nRemoves a hazard from the CDE.\nCheck for collision by containment between a shape and a …\nChecks whether a simple polygon collides with any of the …\nChecks whether a surrogate collides with any of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the lowest <code>QTNode</code> that completely surrounds the …\nEverything Hazard related\nReturns all hazards in the CDE\nAll hazards registered in the CDE (active and inactive)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConfiguration of the surrogate generation for items\nEverything Quadtree related.\nRoot node of the quadtree\nMaximum depth of the quadtree\nRegisters a new hazard in the CDE.\nRestores the CDE to a previous state, as described by the …\nRepresents all regions outside the container\nKey to identify hazards inside the CDE.\nAny spatial constraint affecting the feasibility of a …\nEntity inducing a <code>Hazard</code>. All entities are uniquely …\nRepresents a hole in the container.\nRepresents a zone in the container with a specific quality …\nAn item placed in the layout, defined by its id, applied …\nEverything related to hazard collectors\nWhether the hazard is dynamic, meaning it can change over …\nThe entity inducing the hazard\nEverything related to hazard filters\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the entity induced a hazard within the entire …\nThe shape of the hazard\nA basic implementation of a <code>HazardCollector</code> using a …\nTrait for structs that can track and store detected <code>Hazard</code>…\nDeems hazards with specific <code>HazKey</code>’s as irrelevant.\nTrait for filters to ignore all <code>Hazard</code>s induced by …\nDeems no hazards as irrelevant.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a filter that deems all inferior quality zones …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe hazard is present in the entire node.\nThe hazard is entirely absent from the node\nThe hazard is only partially present in the node\nPresence of a <code>Hazard</code> in a <code>QTNode</code>\nRepresentation of a <code>Hazard</code> in a <code>QTNode</code>\nQuadtree node\nCommon trait for all geometric primitives that can be …\nThe bounding box of the node\nStop traversing the quadtree and perform collision …\nThe children of the node, if any\nGathers all hazards that collide with the entity and …\nUsed to detect collisions in a binary fashion: either …\nChecks\nChecks\nReturns the resulting QTHazards after constricting to the …\nEntity inducing the hazard\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>Hazard</code> into a <code>QTHazard</code>, assuming it is for the …\nThe hazards present in the node\nThe key of the hazard in the hazard map in <code>CDEngine</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe level of the node in the tree, 0 being the bottom-most …\nHow the hazard is present in the node\nThe bounding box of the quadtree node\nA container in which <code>Item</code>’s can be placed.\nRepresents a zone of inferior quality in the <code>Container</code>\nThe (abstract) static representation of a problem instance.\nItem to be produced.\nA <code>Layout</code> is a dynamic representation of items that have …\nImmutable and compact representation of a <code>Layout</code>. Can be …\nMaximum number of qualities that can be used for quality …\nUnique key for each <code>PlacedItem</code> in a layout.\nRepresents an <code>Item</code> that has been placed in a <code>Layout</code>\nAllowed rotations in which the item can be placed\nThe area of the contour of the container, excluding holes\nThe initial state of the <code>CDEngine</code> for this container. …\nReturns the collision detection engine for this layout\nSnapshot of the collision detection engine\nA specific container\nThe container used for this layout\nA copy of the container used in the layout\nAll containers\nThe transformation that was applied to the <code>Item</code> before it …\nThe current density of the layout defined as the ratio of …\nEquivalent to <code>Layout::density</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if no items are placed\nReturns true if all the items are placed without colliding\nA specific item\nID of the type of <code>Item</code> that was placed\nAll items\nThe minimum quality the item should be produced out of, if …\nContour of the container to be used for collision detection\nOriginal contour of the container as defined in the input\nPlaces an item in the layout at a specific position by …\nThe sum of the areas of the items placed in the layout …\nEquivalent to <code>Layout::placed_item_area</code>\nAll the items that have been placed in this layout, …\nA copy of the placed items in the layout\nQuality of this zone. Higher qualities are superior. A …\nZones of different qualities in the container, stored per …\nRemoves an item from the layout by its unique key and …\nRestores the layout to a previous state using a snapshot.\nSaves the current state of the layout to be potentially …\nThe shape of the <code>Item</code> after it has been transformed and …\nContour of the item to be used for collision detection\nOriginal contour of the item as defined in the input\nContours of this quality-zone to be used for collision …\nContours of this quality-zone as defined in the input file\nConfiguration for the surrogate generation\nReplaces the current container with a new one, rebuilding …\nReturns the set of hazards induced by this zone.\nProper rigid transformation, decomposed into a rotation …\nA <code>SPolygon</code> exactly as is defined in the input file\nThe matrix form of <code>DTransformation</code>. read more\nSet of functions to compute and generate convex hulls\nCreates a transformation with no effect.\nThe <em>fail-fast surrogate</em> and all logic pertaining to its …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet of enums representing various geometric properties\nSet of traits representing various geometric properties &amp; …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerates the transformation that undoes the effect of <code>self</code>…\nNormalizes a rotation angle to the range [0, 2π).\nSet of geometric primitives - atomic building blocks for …\nApplies a rotation to <code>self</code>.\nApplies a translation followed by a rotation to <code>self</code>.\nThe rotation in radians\nSet of function to modify geometric shapes\nApplies <code>other</code> to <code>self</code>.\nApplies a translation to <code>self</code>.\nApplies a rotation followed by a translation to <code>self</code>.\nThe translation in the x and y-axis\nFilters a set of points to only include those that are …\nReconstitutes the convex hull of a <code>SPolygon</code> using its …\nReturns the indices of the points in the <code>SPolygon</code> that …\nSurrogate representation of a <code>SPolygon</code> - a ‘light-weight…\nConfiguration of the <code>SPSurrogate</code> generation\nComputes the <em>pole</em> - the largest circle which is both …\nThe configuration used to generate the surrogate\nThe area of the convex hull of the <code>SPolygon</code>.\nIndices of the vertices in the <code>SPolygon</code> that form the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates a set of <code>n</code> <em>piers</em> - line segments fully contained …\nGenerates a set of ‘poles’ for a shape according to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nnumber of piers to test during fail-fast\nNumber of poles to test during fail-fast\nLimits on the number of poles to be generated at different …\nCreates a new <code>SPSurrogate</code> from a <code>SPolygon</code> and a …\nSet of piers\nSet of poles\nComplete continuous rotation allowed\nDiscrete set of rotations allowed\nA ∩ B = ∅\nA ⊆ B\nPossible relations between two geometric entities A and B. …\nA ∩ B ≠ ∅ and neither A ⊆ B nor B ⊆ A\nNo rotation allowed\nB ⊆ A\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrait for types that can detect ‘almost-collisions’ …\nTrait for types that can detect collisions between <code>self</code> …\nTrait for types that can compute the minimum distance …\nTrait for types that can compute the minimum distance to …\nTrait for types that can modify themselves by a …\nTrait for types that can modify themselves to a reference …\nMinimum distance between two primitives. Will be 0 in case …\nIn case of a collision between <code>self</code> and <code>other</code>, returns …\nSquared version of DistanceTo::distance_to\nSquared version of SeparationDistance::separation_distance\nApplies a transformation to <code>self</code>.\nApplies a transformation to a clone.\nApplies a transformation on the reference object and …\nCircle\nLine segment between two <code>Point</code>s\nA Point in 2D space with x and y coordinates\nFor all quadrants, contains indices of the two neighbors …\nAxis-aligned rectangle\nA Simple Polygon is a polygon that does not intersect …\nReturns the <code>GeoRelation</code> between <code>self</code> and another <code>Rect</code>, …\nArea of its interior\nBounding box\nReturns the smallest possible circle that fully contains …\nReturns the smallest rectangle that contains both <code>a</code> and <code>b</code>.\nReturns the closest point which lies on the edge to the …\nReturns the four corners of <code>self</code>, in the same order as …\nMaximum distance between any two points in the polygon\nReturns the four edges that make up <code>self</code>, in the same …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a new rectangle with the same centroid but inflated\nReturns the largest rectangle that is contained in both <code>a</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new simple polygon from a set of points, …\nPole of inaccessibility represented as a circle\nReturns the 4 quadrants of <code>self</code>. Ordered in the same way …\nReturns the geometric relation between <code>self</code> and another …\nReturns a new rectangle with the same centroid as <code>self</code> but …\nReturns a new rectangle with the same centroid but scaled …\nReturns the four sides that make up <code>self</code>, in the same …\nOptional surrogate representation of the polygon (subset …\nSet of points that form the polygon\nModify the shape to be strictly smaller than the original …\nModify the shape to be strictly larger than the original …\nWhether to strictly inflate or deflate when making any …\nCloses narrow concavities in a <code>SPolygon</code> by replacing them …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum distance between two vertices for which a …\nOffset by which to inflate or deflate the polygon. If …\nOffsets a <code>SPolygon</code> by a certain <code>distance</code> either inwards or …\nSimplifies a <code>SPolygon</code> by reducing the number of edges.\nMaximum deviation of the simplified polygon with respect …\nAll logic for exporting internal representations into …\nExternal (serializable) representations of the entities …\nAll logic for converting external representations into …\nAll logic for creating SVG from <code>Layout</code>s\nExports a layout to an external representation.\nConverts an internal (used within <code>jagua-rs</code>) transformation …\nExternal representation of a <code>Container</code>. Items can be …\nExternal representation of an <code>Item</code>.\nExternal representation of a <code>Layout</code>. A layout consists of …\nExternal representation of a <code>PlacedItem</code>. An item placed in …\nA polygon represented as an outer boundary and a list of …\nA zone with a specific quality level\nExternal representation of a <code>SPolygon</code>. A polygon with no …\nVarious ways to represent a shape\nRepresents a proper rigid transformation defined as a …\nMultiple disjoint polygons\nPolygon with a single outer boundary and a set of holes\nAxis-aligned rectangle. With its left bottom corner at …\nPolygon with a single outer boundary\nList of allowed orientations angles (in degrees). …\nThe container that was used\nSome statistics about the layout\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnique identifier of the item\nUnique identifier of the container\nA list of holes in the polygon\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe id of the item in the instance\nThe minimum required quality of the item. Maximum quality …\nThe outer boundary of the polygon\nThe items placed in the container and where they were …\nThe quality level of this zone\nThe rotation angle in radians\nShape of the item\nShape of the container\nThe polygon shape of this zone\nThe transformation applied to the item to place it in the …\nThe translation vector (x, y)\nZones within the container with varying quality. Holes in …\nConverts external representations of items and containers …\nReturns a transformation that translates the shape’s …\nConverts an external transformation (applicable to the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new instance with the given configuration.\nDraw the modified shapes used internally instead of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHighlights the shapes used for collision detection with a …\nDraw dashed lines between colliding items\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDraw the quadtree on top\nDraw the fail fast surrogate on top of each item\nThe theme to use for the svg\nBin Packing Problem (BPP) module\nStrip Packing Problem (SPP) module\nEntities to model the Bin Packing Problem (BPP)\nImporting problem instances into and exporting solutions …\nHelper functions which do not belong to any specific module\nInstance of the Bin Packing Problem.\nEnum to distinguish between both open <code>Layout</code>s, and …\nEncapsulates all required information to place an <code>Item</code> in …\nDynamic counterpart of <code>BPInstance</code>.\nSnapshot of <code>BPProblem</code> at a specific moment. Can be used to …\nA container in the Bin Packing Problem (BPP) with an …\nA layout that does not yet exist, but can be created by ‘…\nUnique key for each <code>Layout</code> in a <code>BPProblem</code> and <code>BPSolution</code>\nAn existing layout, identified by its key\nReturns the total cost of all bins used in the solution.\nSet of bins available to pack the items\nThe container in which to pack the items\nThe cost of using a bin of this type\nThe transformation to apply to the item when placing it\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnique identifier for the bin\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe id of the <code>Item</code> to be placed\nThe items to be packed and their demands\nWhich <code>Layout</code> to place the item in\nA map of the layout snapshots, identified by the same keys …\nCreates a new bin with the given id, container, stock, and …\nPlaces an item according to the provided <code>BPPlacement</code> in …\nRemoves an item from a layout. If the layout is empty, it …\nRemoves a layout from the problem. The bin used by the …\nRestores the state of the problem to the given <code>BPSolution</code>.\nCreates a snapshot of the current state of the problem as …\nThe number of copies of this bin available to be use\nInstant the solution was created\nExports a solution out of the library\nExternal (serializable) representations of Bin Packing …\nImports an instance into the library\nBin Packing Problem instance\nBin Packing Problem solution\nBin with a stock quantity and cost\nItem with a demand\nExternal representation of the item in the base library\nSet of bins to be used\nThe cost of using a bin of this type\nTotal cost of all the bins used in the solution\nAmount of times this item has to be produced\nSum of the area of the produced items divided by the sum …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet of items to be produced\nLayouts which compose the solution\nThe name of the instance\nThe time it took to generate the solution in seconds\nThe number of copies of this bin available to be use\nEntities to model the Strip Packing Problem (SPP)\nImporting problem instances into and exporting solutions …\nHelper functions which do not belong to any specific module\nInstance of the Strip Packing Problem.\nRepresents a placement of an item in the strip packing …\nModifiable counterpart of <code>SPInstance</code>: items can be placed …\nSnapshot of <code>SPProblem</code> at a specific moment. Can be used to …\nRepresents a rectangular container with fixed height and …\nThe strip in which to pack the items\nModifies the width of the strip in the back, keeping the …\nShrinks the strip to the minimum width that fits all items.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe items to be packed and their demands\nPlaces an item according to the given <code>SPPlacement</code> in the …\nRemoves a placed item from the strip. Returns the …\nRestores the state of the problem to the given <code>SPSolution</code>.\nCreates a snapshot of the current state of the problem as …\nInstant the solution was created\nExports a strip packing solution out of the library. …\nExternal (serializable) representations of all Strip …\nImports a strip packing instance into the library. Imports …\nItem with a demand\nStrip Packing Problem instance\nStrip Packing Problem solution\nExternal representation of the item in the base library\nAmount of times this item has to be produced\nSum of the area of the produced items divided by the sum …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet of items to be produced\nLayouts which compose the solution\nThe name of the instance\nThe time it took to generate the solution in seconds\nFixed height of the strip\nThe strip width of the solution\nWrapper around the <code>float_cmp::approx_eq!()</code> macro for easy …\nSet of functions used throughout assure the correctness of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPrints code to rebuild a layout. Intended for debugging …\nChecks if the quadrants follow the layout set in …")