searchState.loadedDescShard("rstar", 0, "An n-dimensional r*-tree implementation.\nAn n-dimensional axis aligned bounding box (AABB).\nThe number of dimensions of this point type.\nThe insertion strategy which is used when calling …\nThe default parameters used when creating an r-tree …\nAn envelope type that encompasses some child nodes.\nThe object’s envelope type. Usually, AABB will be the …\nDefines how points are inserted into an r-tree.\nA leaf node, only containing the r-tree object\nThe maximum size of an internal node. Larger values will …\nThe minimum size of an internal node. <code>MIN_SIZE</code> must be …\nA parent node containing several child nodes\nRepresents an internal parent node.\nDefines a point type that is compatible with rstar.\nThe envelope’s point type.\nDefines objects which can calculate their minimal distance …\nThe number of nodes that the insertion strategy tries to …\nInserts points according to the r-star heuristic.\nAn n-dimensional r-tree data structure.\nAn internal tree node.\nDefines a number type that is compatible with rstar.\nAn object that can be inserted into an r-tree.\nDefines static parameters for an r-tree.\nThe number type used by this point type.\nAdvanced trait to iterate through an r-tree. Usually it …\nReturns this envelope’s area. Must be at least 0.\nCreates a new r-tree with some elements already inserted.\nCreates a new r-tree with some given elements and …\nReturns the envelope’s center point.\nReturns this node’s children\nReturns <code>true</code> if a given element is equal (<code>==</code>) to an …\nReturns true if another envelope is <em>fully contained</em> within …\nReturns true if a point is contained within this envelope.\nReturns <code>true</code> if a point is contained within this object.\nReturns <code>true</code> if a point is contained within this object.\nReturns the euclidean distance to the envelope’s border.\nReturns the squared euclidean distance between an object …\nReturns the squared distance to the AABB’s min_point\nReturns the squared distance to this object, or <code>None</code> if …\nReturns the squared distance to this object, or <code>None</code> if …\nReturns a draining iterator over all elements contained in …\nDraining variant of locate_in_envelope.\nDrains elements intersecting the <code>envelope</code>. Similar to …\nDrain elements selected by a <code>SelectionFunction</code>. Returns an …\nDrain all elements of the tree within a certain distance.\nReturns the object’s envelope.\nReturns the smallest envelope that encompasses all …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new AABB encompassing two points.\nReturns the AABB encompassing a single point.\nCreates a new AABB encompassing a collection of points.\nCreates a new point value with given values for each …\nInserts a new element into the r-tree.\nReturns the area of the intersection of <code>self</code> and another …\nReturns all possible intersecting objects of this and …\nReturns true if <code>self</code> and <code>other</code> intersect. The intersection …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over all elements contained in the …\nReturns an iterator over all mutable elements contained in …\nIterator types\nLocate all elements containing a given point.\nMutable variant of locate_all_at_point.\nReturns a single object that covers a given point.\nMutable variant of RTree::locate_at_point.\nReturns all elements contained in an Envelope.\nReturns all elements whose envelope intersects a given …\nMutable variant of locate_in_envelope_intersecting\nMutable variant of locate_in_envelope.\nLocates elements in the r-tree defined by a selection …\nMutable variant of <code>locate_with_selection_function</code>.\nReturns all elements of the tree within a certain distance.\nReturns the AABB’s lower corner.\nExtends <code>self</code> to contain another envelope.\nReturns the minimal envelope containing <code>self</code> and another …\nReturns the squared min-max distance, a concept that helps …\nReturns the point within this AABB closest to a given …\nReturns the nearest neighbor for a given point.\nReturns all elements of the tree sorted by their distance …\nReturns <code>(element, distance^2)</code> tuples of the tree sorted by …\nReturns <code>(element, distance^2)</code> tuples of the tree sorted by …\nReturns the nearest neighbors for a given point.\nCreates a new, empty r-tree.\nCreates a new, empty envelope that does not encompass any …\nCreates a new, empty r-tree.\nReturns a single coordinate of this point.\nMutable variant of nth.\nPartitions objects with an envelope along a certain axis.\nReturns a value proportional to the envelope’s perimeter.\nRemoves the nearest neighbor for a given point and returns …\nContains primitives ready for insertion into an r-tree.\nRemoves and returns an element of the r-tree equal (<code>==</code>) to …\nRemoves an element containing a given point.\nRemoves and returns a single element from the tree. The …\nReturns the tree’s root node.\nReturns <code>true</code> if a given child node should be returned …\nReturns <code>true</code> if a given child node should be returned …\nReturn <code>true</code> if a parent node should be unpacked during a …\nReturns the number of objects in an r-tree.\nSorts a given set of objects with envelopes along one of …\nReturns the AABB’s upper corner.\nIterator returned by <code>RTree::drain_*</code> methods.\nIterator returned by …\nIterator returned by <code>RTree::locate_all_at_point</code>.\nIterator returned by <code>RTree::locate_all_at_point_mut</code>.\nIterator returned by <code>RTree::locate_in_envelope</code>.\nIterator returned by <code>RTree::locate_in_envelope_intersecting</code>…\nIterator returned by …\nIterator returned by <code>RTree::locate_in_envelope_mut</code>.\nIterator returned by <code>RTree::locate_within_distance</code>.\nIterator returned by <code>RTree::iter</code>.\nIterator returned by <code>RTree::iter_mut</code>.\nIterator returned by <code>RTree::locate_*</code> methods.\nIterator type returned by <code>RTree::locate_*_mut</code> methods.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn RTreeObject with a geometry and some associated data …\nA line defined by a start and and end point.\nA point with some associated data that can be inserted …\nAn n-dimensional rectangle defined by its two corners.\nData to be associated with the geometry being stored in …\nAny data associated with a point.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe line’s start point\nCreates a new rectangle defined by it’s [axis aligned …\nCreates a new rectangle defined by two corners.\nGet a reference to the container’s geometry.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the squared length of this line.\nReturns the rectangle’s lower corner.\nReturns the nearest point on this line relative to a given …\nReturns the nearest point within this rectangle to a given …\nCreate a new GeomWithData struct using the provided …\nCreates a new line between two points.\nCreates a new <code>PointWithData</code> with the provided data.\nReturns this point’s position.\nThe line’s end point.\nReturns the rectangle’s upper corner.")