searchState.loadedDescShard("geo", 0, "The <code>geo</code> crate provides geospatial primitive types and …\nThe result of trying to find the closest spot on an object …\nFor algorithms which can only use floating point <code>Point</code>s/…\nFor algorithms which can use both integer <strong>and</strong> floating …\nA common numeric trait used for geo algorithms\nA trait for methods which work for both integers <strong>and</strong> …\nThere are two or more (possibly infinite or undefined) …\nThe point actually intersects with the object.\nThere is exactly one place on this object which is closest …\nThis module includes all the functions of geometric …\nCompare two <code>Closest</code>s relative to <code>p</code> and return a copy of …\nCreates a <code>Coord</code> from the given scalars.\nReturns the argument unchanged.\nThis module makes all geometry types available\nImplements the common pattern where a Geometry enum simply …\nCalls <code>U::from(self)</code>.\nCreates a <code>LineString</code> containing the given coordinates.\nCreates a <code>Point</code> from the given coordinates.\nCreates a <code>Polygon</code> containing the given coordinates.\nA prelude which re-exports the traits for manipulating …\nComposable affine operations such as rotate, scale, skew, …\nCalculate the area of the surface of a <code>Geometry</code>.\nCalculate the bearing to another <code>Point</code>, in degrees.\nBoolean Ops such as union, xor, difference;\nCalculate the bounding rectangle of a <code>Geometry</code>.\nCalculate the centroid of a <code>Geometry</code>.\nSmoothen <code>LineString</code>, <code>Polygon</code>, <code>MultiLineString</code> and …\nCalculate the signed approximate geodesic area of a …\nCalculate the closest <code>Point</code> between a <code>Geometry</code> and an …\nCalculate the concave hull of a <code>Geometry</code>.\nDetermine whether <code>Geometry</code> <code>A</code> completely encloses <code>Geometry</code> <code>B</code>…\nConvert the type of a geometry’s coordinate value.\nCalculate the convex hull of a <code>Geometry</code>.\nDetermine whether a <code>Coord</code> lies inside, outside, or on the …\nIterate over geometry coordinates.\nDensify linear geometry components\nDimensionality of a geometry and its boundary, based on …\nCalculate the minimum Euclidean distance between two …\nCalculate the length of a planar line between two …\nCalculate the extreme coordinates and indices of a …\nCalculate the Frechet distance between two <code>LineStrings</code>.\nCalculate the Geodesic area and perimeter of polygons.\nCalculate the bearing to another <code>Point</code> on a geodesic.\nReturns a new Point using a distance and bearing on a …\nCalculate the Geodesic distance between two <code>Point</code>s.\nCalculate a new <code>Point</code> lying on a Geodesic arc between two …\nCalculate the Geodesic length of a line.\nCalculate the bearing to another <code>Point</code>, in degrees.\nCalculate a destination <code>Point</code>, given a distance and a …\nCalculate the Haversine distance between two <code>Geometries</code>.\nCalculate a new <code>Point</code> lying on a Great Circle arc between …\nCalculate the Haversine length of a Line.\nCalculate a representative <code>Point</code> inside a <code>Geometry</code>\nDetermine whether <code>Geometry</code> <code>A</code> intersects <code>Geometry</code> <code>B</code>.\nDetermines whether a <code>LineString</code> is convex.\nCalculate concave hull using k-nearest algorithm\nKernels to compute various predicates\nInterpolate a point along a <code>Line</code> or <code>LineString</code>.\nComputes the intersection of two Lines.\nLocate a point along a <code>Line</code> or <code>LineString</code>.\nIterate over the lines in a geometry.\nApply a function to all <code>Coord</code>s of a <code>Geometry</code>.\nCalculate the minimum rotated rectangle of a <code>Geometry</code>.\nOrient a <code>Polygon</code>’s exterior and interior rings.\nDetect outliers in a group of points using LOF\nRelate two geometries based on DE-9IM\nRemove (consecutive) repeated points\nRotate a <code>Geometry</code> by an angle given in degrees.\nScale a <code>Geometry</code> up or down by a factor\nSimplify <code>Geometries</code> using the Ramer-Douglas-Peucker …\nSimplify <code>Geometries</code> using the Visvalingam-Whyatt …\nSkew a <code>Geometry</code> by shearing it at angles along the x and y …\nPlanar sweep algorithm and related utils\nTranslate a <code>Geometry</code> along the given offsets.\nCalculate the Vincenty distance between two <code>Point</code>s.\nCalculate the Vincenty length of a <code>LineString</code>.\nCalculate and work with the winding order of <code>Linestring</code>s.\nDetermine whether <code>Geometry</code> <code>A</code> is completely within by …\nApply an <code>AffineTransform</code> like <code>scale</code>, <code>skew</code>, or <code>rotate</code> to a …\nA general affine transformation matrix, and associated …\nApply <code>transform</code> immutably, outputting a new geometry.\nApply <code>transform</code> to mutate <code>self</code>.\nApply the current transform to a coordinate\nCreate a new affine transformation by composing two …\nReturns the argument unchanged.\nCreate the identity matrix\nCalls <code>U::from(self)</code>.\nWhether the transformation is equivalent to the identity …\nCreate a new custom transform matrix\n<strong>Create</strong> an affine transform for rotation, using an …\n<strong>Add</strong> an affine transform for rotation, using an arbitrary …\n<strong>Create</strong> a new affine transform for scaling, scaled by …\n<strong>Add</strong> an affine transform for scaling, scaled by factors …\n<strong>Create</strong> an affine transform for skewing.\n<strong>Add</strong> an affine transform for skewing.\n<strong>Create</strong> an affine transform for translation, shifted by …\n<strong>Add</strong> an affine transform for translation, shifted by …\nSigned and unsigned planar area of a geometry.\nReturns the bearing to another Point in degrees, where …\nBoolean Operations on geometry.\nClip a 1-D geometry with self.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalculation of the bounding rectangle of a geometry.\nReturn the bounding rectangle of a geometry\nCalculation of the centroid. The centroid is the …\nSee: https://en.wikipedia.org/wiki/Centroid\nSmoothen <code>LineString</code>, <code>Polygon</code>, <code>MultiLineString</code> and …\ncreate a new geometry with the Chaikin smoothing being …\nCalculate the signed approximate geodesic area of a …\nFind the closest <code>Point</code> between a given geometry and an …\nFind the closest point between <code>self</code> and <code>p</code>.\nReturns a polygon which covers a geometry. Unlike convex …\nChecks if <code>rhs</code> is completely contained within <code>self</code>. More …\nConvert (infalliby) the type of a geometry’s coordinate …\nConvert (fallibly) the type of a geometry’s coordinate …\nReturns the convex hull of a Polygon. The hull is always …\nThe Graham’s scan algorithm to compute the convex hull …\nThe position of a <code>Coord</code> relative to a <code>Geometry</code>\nDetermine whether a <code>Coord</code> lies inside, outside, or on the …\nCalculate the position of a <code>Coord</code> relative to a closed …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIterate over geometry coordinates.\nReturn the number of coordinates in a geometry.\nIterate over all exterior and (if any) interior …\nIterate over all exterior coordinates of a geometry.\nReturn a new linear geometry containing both existing and …\nGeometries can have 0, 1, or two dimensions. Or, in the …\nSome geometries, like a <code>MultiPoint</code> or <code>GeometryCollection</code> …\nOperate on the dimensionality of geometries.\nDimension of a line or curve\nDimension of a surface\nDimension of a point\nThe dimensions of the <code>Geometry</code>’s boundary, as used by …\nThe dimensions of some geometries are fixed, e.g. a Point …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSome geometries, like a <code>MultiPoint</code>, can have zero …\nReturns the distance between two geometries.\nReturns the distance between two geometries\nUses an R* tree and nearest-neighbour lookups to calculate …\nCalculation of the length\nCalculation of the length of a Line\nFind the extreme coordinates and indices of a geometry.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermine the similarity between two <code>LineStrings</code> using the …\nDetermine the similarity between two <code>LineStrings</code> using the …\nDetermine the perimeter and area of a geometry on an …\nDetermine the area of a geometry on an ellipsoidal model …\nDetermine the area of a geometry on an ellipsoidal model …\nDetermine the perimeter of a geometry on an ellipsoidal …\nDetermine the perimeter and area of a geometry on an …\nDetermine the perimeter and area of a geometry on an …\nReturns the bearing to another Point in degrees on a …\nReturns the bearing to another Point in degrees, where …\nReturns the bearing and distance to another Point in a …\nReturns a new Point using the distance to the existing …\nReturns a new Point using distance to the existing Point …\nDetermine the distance between two geometries on an …\nDetermine the distance between two geometries on an …\nReturns a new Point along a route between two existing …\nReturns a new Point along a route between two existing …\nDetermine the length of a geometry on an ellipsoidal model …\nDetermine the length of a geometry on an ellipsoidal model …\nReturns the bearing to another Point in degrees.\nReturns the bearing to another Point in degrees, where …\nReturns a new Point using the distance to the existing …\nReturns a new Point using distance to the existing Point …\nDetermine the distance between two geometries using the …\nDetermine the distance between two geometries using the …\nReturns a new Point along a great circle route between two …\nReturns a new Point along a great circle route between two …\nDetermine the length of a geometry using the haversine …\nDetermine the length of a geometry using the haversine …\nCalculation of interior points. An interior point is a …\nCalculates a representative point inside the <code>Geometry</code>\nChecks if the geometry Self intersects the geometry Rhs. …\nPredicates to test the convexity of a  <code>LineString</code> . A …\nTest and get the orientation if the shape is convex. Tests …\nTest if the shape is convex, and oriented …\nTest if the shape lies on a line.\nTest if the shape is convex.\nTest if the shape is convex, and oriented clockwise.\nTest if the shape is strictly convex, and oriented …\nTest if the shape is strictly convex.\nTest if the shape is strictly convex, and oriented …\nAnother approach for concave hull. This algorithm is based …\nMarker trait to assign Kernel for scalars\nKernel trait to provide predicates to operate on different …\nCompute the sign of the dot product of <code>u</code> and <code>v</code> using …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGives the orientation of 3 2-dimensional points: ccw, cw …\nRobust kernel that uses fast robust predicates to provide …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSimple kernel provides the direct implementation of the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns an option of the point that lies a given fraction …\nOverlapping Lines intersect in a line segment\nLines intersect in a single point\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the intersection between two <code>Lines</code>.\nFor Lines which intersect in a single point, that point …\nReturns a (option of the) fraction of the line’s total …\nIterator over lines in a LineString.\nIterate over lines of a geometry.\nUtility to transform <code>Iterator&lt;LinesIter&gt;</code> into …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate over all exterior and (if any) interior lines of a …\nMap a function over all the coordinates in an object, …\nMap a function over all the coordinates in an object in …\nMap a fallible function over all the coordinates in a …\nApply a function to all the coordinates in a geometric …\nApply a function to all the coordinates in a geometric …\nApply a function to all the coordinates in a geometric …\nMap a fallible function over all the coordinates in a …\nMap a fallible function over all the coordinates in a …\nMap a fallible function over all the coordinates in a …\nMap a fallible function over all the coordinates in a …\nReturn the minimum bounding rectangle(MBR) of geometry …\nexterior ring is oriented counter-clockwise, interior …\nBy default, a properly-oriented Polygon has its outer ring …\nexterior ring is oriented clockwise, interior rings are …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOrients a Polygon’s exterior and interior rings …\nCalculate the Local Outlier Factor of a set of points\nThis struct allows multiple detection operations to be run …\nConvenience method to efficiently calculate the maximum …\nConvenience method to efficiently calculate the minimum …\nReturns the argument unchanged.\nPerform successive runs with <code>k_neighbours</code> values between …\nCalls <code>U::from(self)</code>.\nThe LOF algorithm. <code>k_neighbours</code> specifies the number of …\nSee <code>OutlierDetection::outliers</code> for usage\nCreate a prepared outlier detector allowing multiple runs …\nModels a <em>Dimensionally Extended Nine-Intersection Model </em>…\nTopologically relate two geometries based on DE-9IM …\nReturns the argument unchanged.\nDirectly accesses this matrix\nCalls <code>U::from(self)</code>.\nTests whether this matrix matches <code>[T*****FF*]</code>.\nTests if this matrix matches <code>[FF*FF****]</code>.\nTests if <code>is_disjoint</code> returns false.\nTests whether this matrix matches <code>[T*F**F***]</code>.\nRemove repeated points from a <code>MultiPoint</code> and repeated …\nCreate a new geometry with (consecutive) repeated points …\nRemove (consecutive) repeated points inplace.\nRotate a geometry around a point by an angle, in degrees.\nRotate a geometry around the center of its bounding box by …\nMutable version of <code>Self::rotate_around_center</code>\nRotate a geometry around its centroid by an angle, in …\nMutable version of <code>Self::rotate_around_centroid</code>\nRotate a Geometry around an arbitrary point by an angle, …\nMutable version of <code>Self::rotate_around_point</code>\nAn affine transformation which scales a geometry up or …\nScale a geometry from it’s bounding box center.\nScale a geometry around a point of <code>origin</code>.\nMutable version of <code>scale_around_point</code>.\nMutable version of <code>scale</code>\nScale a geometry from it’s bounding box center, using …\nMutable version of <code>scale_xy</code>.\nSimplifies a geometry.\nSimplifies a geometry, returning the retained <em>indices</em> of …\nReturns the simplified representation of a geometry, using …\nReturns the simplified indices of a geometry, using the …\nSimplifies a geometry.\nSimplifies a geometry, returning the retained <em>indices</em> of …\nSimplifies a geometry, preserving its topology by removing …\nReturns the simplified representation of a geometry, using …\nReturns the simplified representation of a geometry, using …\nReturns the simplified representation of a geometry, using …\nAn affine transformation which skews a geometry, sheared …\nAn affine transformation which skews a geometry, sheared …\nAn affine transformation which skews a geometry around a …\nMutable version of <code>skew_around_point</code>.\nMutable version of <code>skew</code>.\nAn affine transformation which skews a geometry, sheared …\nMutable version of <code>skew_xy</code>.\nInterface for types that can be processed to detect …\nIterator over all intersections of a collection of lines.\nEither a line segment or a point.\nScalar used the coordinates.\nA lexicographically ordered point.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIntersect a line with self and return a point, a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the variant is a line.\nThe geometry associated with this type. Use a <code>Line</code> with the\nReturn a <code>Line</code> representation of self.\nTranslate a Geometry along its axes by the given offsets\nTranslate a Geometry along its axes, but in place.\nDetermine the distance between two geometries using …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDetermine the distance between two geometries using …\nDetermine the length of a geometry using Vincenty’s …\nDetermine the length of a geometry using Vincenty’s …\nIterates through a list of <code>Point</code>s\nDetermine and operate on how a <code>LineString</code> is wound. This …\nHow a linestring is wound, clockwise or counter-clockwise\nReturn a clone of this object, but in the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue iff this is wound counterclockwise\nTrue iff this is wound clockwise\nChange this line’s points so they are in …\nChange this object’s points so they are in clockwise …\nChange the winding order so that it is in this winding …\nIterate over the points in a counter-clockwise order\nIterate over the points in a clockwise order\nReturn the winding order of this object if it contains at …\nTests if a geometry is completely within another geometry.\nA lightweight struct used to store coordinates on the …\nAn enum representing any possible geometry type.\nA collection of <code>Geometry</code> types.\nA line segment made up of exactly two <code>Coord</code>s.\nAn ordered collection of <code>Coord</code>s, representing a path …\nA collection of <code>LineString</code>s. Can be created from a <code>Vec</code> of …\nA collection of <code>Point</code>s. Can be created from a <code>Vec</code> of <code>Point</code>…\nA collection of <code>Polygon</code>s. Can be created from a <code>Vec</code> of …\nA single point in 2D space.\nA bounded two-dimensional area.\nAn <em>axis-aligned</em> bounded 2D rectangle whose area is defined …\nA bounded 2D area whose three vertices are defined by <code>Coord</code>…\nEquality assertion with an absolute limit.\nEquality assertion with an absolute limit.\nEquality assertion with an absolute limit.\nEquality assertion with an absolute limit.\nEquality assertion with an absolute limit.\nEquality assertion with an absolute limit.\nEquality assertion with an absolute limit.\nEquality assertion with an absolute limit.\nEquality assertion with an absolute limit.\nEquality assertion with an absolute limit.\nEquality assertion with an absolute limit.\nAdd a point to the given point.\nAdd a point to the given point and assign it to the …\nReturn the bounding rectangle for a <code>Coord</code>. It will have …\nReturn the BoundingRect for a LineString\nReturn the BoundingRect for a MultiLineString\nReturn the BoundingRect for a MultiPoint\nReturn the BoundingRect for a MultiPolygon\nReturn the bounding rectangle for a <code>Point</code>. It will have …\nReturn the BoundingRect for a Polygon\nReturns the center <code>Coord</code> of the <code>Rect</code>.\nThe Centroid of a <code>GeometryCollection</code> is the mean of the …\nThe Centroid of a <code>Line</code> is its middle point\nExamples\nThe Centroid of a <code>MultiLineString</code> is the mean of the …\nThe Centroid of a <code>MultiPoint</code> is the mean of all <code>Point</code>s\nThe Centroid of a <code>MultiPolygon</code> is the mean of the …\nThe Centroid of a <code>Point</code> is the point itself\nThe Centroid of a <code>Polygon</code> is the mean of its points\nThe Centroid of a <code>Rect</code> is the mean of its <code>Point</code>s\nThe Centroid of a <code>Triangle</code> is the mean of its <code>Point</code>s\nThe Centroid of a <code>Geometry</code> is the centroid of its enum …\nClose the <code>LineString</code>. Specifically, if the <code>LineString</code> has …\nReturn an iterator yielding the members of a <code>LineString</code> as …\nReturn the number of coordinates in the <code>GeometryCollection</code>.\nReturn the number of coordinates in the <code>Line</code>.\nReturn the number of coordinates in the <code>LineString</code>.\nReturn the number of coordinates in the <code>MultiLineString</code>.\nReturn the number of coordinates in the <code>MultiPoint</code>.\nReturn the number of coordinates in the <code>MultiPolygon</code>.\nReturn the number of coordinates in the <code>Point</code>.\nReturn the number of coordinates in the <code>Polygon</code>.\nReturn the number of coordinates in the <code>Rect</code>.\nReturn the number of coordinates in the <code>Triangle</code>.\nReturn the number of coordinates in the <code>Geometry</code>.\nReturn an iterator yielding the coordinates of a <code>LineString</code>…\nReturns the cross product of 3 points. A positive value …\nCalculate the difference in coordinates (Δx, Δy).\nCalculate the determinant of the line.\nScaler division of a point\nScaler division of a point in place\nReturns the dot product of the two points: …\nCalculate the difference in ‘x’ components (Δx).\nCalculate the difference in ‘y’ components (Δy).\nReturns an empty GeometryCollection\nReturns an empty LineString\nReturns an empty MultiLineString\nReturns an empty MultiPoint\nReturns an empty MultiPolygon\nReturns an empty Polygon.\nMinimum distance between two <code>Coord</code>s\nMinimum distance from a <code>Coord</code> to a <code>Line</code>\nMinimum distance from a <code>Line</code> to a <code>Coord</code>\nMinimum distance from a Line to a Point\nMinimum distance from a LineString to a Point\nMinimum distance from a MultiLineString to a Point\nMinimum distance from a MultiPoint to a Point\nMinimum distance from a MultiPolygon to a Point\nMinimum distance from a Point to a MultiPolygon\nMinimum distance from a Point to a MultiPoint\nMinimum distance from a Point to a Polygon\nMinimum distance from a Point to a MultiLineString\nMinimum distance between two Points\nMinimum distance from a Point to a LineString\nMinimum distance from a Line to a Point\nMinimum distance from a Polygon to a Point\nReturn a reference to the exterior <code>LineString</code> ring.\nExecute the provided closure <code>f</code>, which is provided with a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a <code>Vec</code> of <code>Points</code> (or <code>Vec</code> of things which can be …\nConvert a single <code>Point</code> (or something which can be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCollect the results of a <code>Point</code> iterator into a <code>MultiPoint</code>\nThe units of the returned value is meters.\nReturns the height of the <code>Rect</code>.\nThe interior point of a MultiLineString is, of the …\nReturn a slice of the interior <code>LineString</code> rings.\nExecute the provided closure <code>f</code>, which is provided with a …\nAdd an interior ring to the <code>Polygon</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the coordinates of a <code>LineString</code> as a <code>Vec</code> of <code>Coord</code>s\nConsume the <code>Polygon</code>, returning the exterior <code>LineString</code> …\nIf this Geometry is a Line, then return that Line, else …\nIf this Geometry is a LineString, then return that …\nIf this Geometry is a MultiLineString, then return that, …\nIf this Geometry is a MultiPoint, then return that, else …\nIf this Geometry is a MultiPolygon, then return that, else …\nIf this Geometry is a Point, then return that, else None.\nReturn the coordinates of a <code>LineString</code> as a <code>Vec</code> of <code>Point</code>s\nIf this Geometry is a Polygon, then return that, else None.\nChecks if the linestring is closed; i.e. it is either …\nTrue if the MultiLineString is empty or if all of its …\nDetermine whether a Polygon is convex\nIs this GeometryCollection empty\nReturns the latitude/vertical component of the point.\nNumber of geometries in this GeometryCollection\nReturn an iterator yielding one <code>Line</code> for each line segment …\nReturns the longitude/horizontal component of the point.\nChange this line’s points so they are in …\nChange this line’s points so they are in clockwise …\nApply a function to all the coordinates in a geometric …\nApply a function to all the coordinates in a geometric …\nApply a function to all the coordinates in a geometric …\nApply a function to all the coordinates in a geometric …\nApply a function to all the coordinates in a geometric …\nApply a function to all the coordinates in a geometric …\nApply a function to all the coordinates in a geometric …\nApply a function to all the coordinates in a geometric …\nApply a function to all the coordinates in a geometric …\nApply a function to all the coordinates in a geometric …\nApply a function to all the coordinates in a geometric …\nReturns the maximum <code>Coord</code> of the <code>Rect</code>.\nReturns the minimum <code>Coord</code> of the <code>Rect</code>.\nScaler multiplication of a point\nScaler multiplication of a point in place\nReturns a point with the x and y components negated.\nReturn an empty GeometryCollection\nCreates a new line segment.\nReturns a LineString with the given coordinates\nReturns a MultiLineString with the given LineStrings as …\nReturns a MultiPoint with the given Points as elements\nReturns a MultiPolygon with the given Polygons as elements\nCreates a new point.\nCreate a new <code>Polygon</code> with the provided exterior <code>LineString</code> …\nCreates a new rectangle from two corner coordinates.\nInstantiate Self from the raw content value\nDO NOT USE! This fn will be renamed to <code>new</code> in the upcoming …\nReturn the number of coordinates in the <code>LineString</code>.\nCount the number of interior rings in the polygon\nCount the total number of rings (interior and exterior) in …\nReturn an iterator yielding the coordinates of a <code>LineString</code>…\nIterate over the points in a counter-clockwise order\nIterate over the points in a clockwise order\nReturn an iterator yielding the coordinates of a <code>LineString</code>…\nEquality assertion within a relative limit.\nEquality assertion within a relative limit.\nEquality assertion within a relative limit.\nEquality assertion within a relative limit.\nEquality assertion within a relative limit.\nEquality assertion within a relative limit.\nEquality assertion within a relative limit.\nEquality assertion within a relative limit.\nEquality assertion within a relative limit.\nEquality assertion within a relative limit.\nEquality assertion within a relative limit.\nCreate a GeometryCollection with (consecutive) repeated …\nCreate a LineString with consecutive repeated points …\nCreate a MultiLineString with consecutive repeated points …\nCreate a MultiPoint with repeated points removed.\nCreate a MultiPolygon with consecutive repeated points …\nCreate a Polygon with consecutive repeated points removed.\nCreate a Geometry with consecutive repeated points removed.\nRemove (consecutive) repeated points of its geometries …\nRemove consecutive repeated points from a LineString …\nRemove consecutive repeated points from a MultiLineString …\nRemove repeated points from a MultiPoint inplace.\nRemove consecutive repeated points from a MultiPolygon …\nRemove consecutive repeated points from a Polygon inplace.\nRemove consecutive repeated points from a Geometry inplace.\nReturn an iterator yielding one <code>Line</code> for each line segment …\nSets the latitude/vertical component of the point.\nSets the longitude/horizontal component of the point.\nSet the <code>Rect</code>’s maximum coordinate.\nSet the <code>Rect</code>’s minimum coordinate.\nSets the x/horizontal component of the point.\nSets the y/vertical component of the point.\nCalculate the slope (Δy/Δx).\nSplit a rectangle into two rectangles along the X-axis …\nSplit a rectangle into two rectangles along the Y-axis …\nSubtract a point from the given point.\nSubtract a point from the given point and assign it to the …\nConverts the (x,y) components of Point to degrees\nCreate a <code>Polygon</code> from the <code>Rect</code>.\nCreate a <code>Polygon</code> from the <code>Triangle</code>.\nConverts the (x,y) components of Point to radians\nAn iterator which yields the coordinates of a <code>LineString</code> …\nFallible alternative to <code>exterior_mut</code>.\nFallible alternative to <code>interiors_mut</code>.\nApproximate equality assertion for floating point …\nThe units of the returned value is meters.\nReturns the width of the <code>Rect</code>.\nReturns the x/horizontal component of the point.\nTypically, <code>x</code> is the horizontal position, or longitude for …\nTypically, <code>x</code> is the horizontal position, or longitude for …\nReturns a mutable reference to the x/horizontal component …\nReturns a tuple that contains the x/horizontal &amp; …\nReturns a tuple that contains the x/horizontal &amp; …\nReturns the y/vertical component of the point.\nTypically, <code>y</code> is the vertical position, or latitude for …\nTypically, <code>y</code> is the vertical position, or latitude for …\nReturns a mutable reference to the x/horizontal component …")